{
  "articles": [
    {
      "title": "Introduction à la programmation fonctionnelle avec JavaScript",
      "slug": "programmation-fonctionnelle-javascript",
      "description": "Découvrez les concepts clés de la programmation fonctionnelle et comment les appliquer en JavaScript.",
      "content": "# La programmation fonctionnelle en JavaScript\n\n## Concepts clés\n\n### Fonctions pures\nUne fonction pure est une fonction qui :\n1. Donne toujours le même résultat avec les mêmes arguments\n2. N'a pas d'effets de bord\n3. Ne modifie pas les données en dehors de son portée\n\n```javascript\n// Exemple de fonction pure\nfunction add(a, b) {\n    return a + b;\n}\n\n// Exemple de fonction impure\nlet count = 0;\nfunction increment() {\n    count++; // Effet de bord\n    return count;\n}\n```\n\n### Avantages\n\n| Avantage | Description |\n|----------|-------------|\n| Testabilité | Les fonctions pures sont plus faciles à tester |\n| Réutilisabilité | Les fonctions peuvent être réutilisées facilement |\n| Débogage | Les bugs sont plus faciles à identifier |\n| Parallélisation | Les opérations peuvent être exécutées en parallèle |\n\n### Concepts avancés\n\n#### Fonctions de premier ordre\nEn JavaScript, les fonctions sont des citoyens de premier ordre, ce qui signifie qu'elles peuvent être :\n- Passées comme arguments\n- Retournées par d'autres fonctions\n- Stockées dans des variables\n- Stockées dans des objets ou des tableaux\n\n```javascript\n// Exemple de fonction de premier ordre\nfunction multiplier(n) {\n    return function(x) {\n        return x * n;\n    };\n}\n\nconst doubler = multiplier(2);\nconsole.log(doubler(5)); // 10\n```\n\n#### Fonctions curryées\nLe currying est une technique qui transforme une fonction qui prend plusieurs arguments en une série de fonctions qui prennent un seul argument.\n\n```javascript\n// Fonction normale\nfunction add(a, b) {\n    return a + b;\n}\n\n// Fonction curryée\nfunction addCurried(a) {\n    return function(b) {\n        return a + b;\n    };\n}\n\n// Utilisation\nconst add5 = addCurried(5);\nconsole.log(add5(3)); // 8\n```\n\n### Bibliothèques utiles\n\n| Bibliothèque | Description |\n|--------------|-------------|\n| Lodash | Une bibliothèque complète de fonctions utilitaires |\n| Ramda | Une bibliothèque purement fonctionnelle |\n| Immutable.js | Une bibliothèque pour les données immuables |\n\n### Meilleures pratiques\n\n1. Évitez les mutations\n2. Utilisez les fonctions pures\n3. Préférez la composition aux héritages\n4. Utilisez les bibliothèques fonctionnelles quand c'est approprié\n5. Documentez vos fonctions",
      "categorie": "Développement",
      "image": {
        "url": "https://images.unsplash.com/photo-1498075392652-59fe004397b5",
        "publicId": "functional-js"
      }
    },
    {
      "title": "Créer un portfolio interactif avec Three.js",
      "slug": "portfolio-3d-threejs",
      "description": "Découvrez comment ajouter des effets 3D à votre portfolio avec Three.js.",
      "content": "# Introduction à Three.js\n\n## Concepts clés\n\n### Installation\n\n```bash\nnpm install three\n```\n\n### Structure de base\n\n```javascript\n// Configuration de base\nconst scene = new THREE.Scene();\ncamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer();\n\n// Configuration du renderer\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Position de la caméra\ncamera.position.z = 5;\n\n// Animation\nfunction animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n}\nanimate();\n```\n\n### Types d'objets 3D\n\n| Type | Description | Exemple |\n|------|-------------|---------|\n| Mesh | Objet 3D avec géométrie et matériau | Cube, Sphere |\n| Light | Source de lumière | PointLight, DirectionalLight |\n| Camera | Point de vue | PerspectiveCamera, OrthographicCamera |\n\n### Création d'un cube\n\n```javascript\n// Géométrie\nconst geometry = new THREE.BoxGeometry();\n\n// Matériau\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n\n// Mesh\nconst cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n```\n\n### Animation interactive\n\n```javascript\n// Rotation\nfunction animate() {\n    requestAnimationFrame(animate);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.render(scene, camera);\n}\n\n// Interaction\nwindow.addEventListener('click', () => {\n    cube.scale.x += 0.1;\n    cube.scale.y += 0.1;\n    cube.scale.z += 0.1;\n});\n```\n\n### Meilleures pratiques\n\n1. Optimisez les performances :\n   - Limitez le nombre d'objets\n   - Utilisez des groupes pour les objets similaires\n   - Implémentez des techniques d'optimisation\n\n2. Gestion des ressources :\n   - Chargez les assets de manière asynchrone\n   - Utilisez des textures compressées\n   - Implémentez un système de cache\n\n3. Accessibilité :\n   - Ajoutez des alternatives pour les utilisateurs qui ne supportent pas WebGL\n   - Fournissez des contrôles clairs\n   - Respectez les normes WCAG\n\n### Exemples d'utilisation\n\n| Usage | Description |\n|-------|-------------|\n| Portfolio | Animations 3D pour mettre en valeur les projets |\n| Visualisation de données | Représentations 3D des données |\n| Jeux | Création de jeux 3D interactifs |\n| E-commerce | Visualisation 3D des produits |\n\n### Ressources utiles\n\n- Documentation officielle : [threejs.org/docs](https://threejs.org/docs)\n- Exemples : [threejs.org/examples](https://threejs.org/examples)\n- Tutoriels : [threejsfundamentals.org](https://threejsfundamentals.org)",
      "categorie": "UI/UX",
      "image": {
        "url": "https://images.unsplash.com/photo-1510096520728-72a4608a6641",
        "publicId": "threejs-portfolio"
      }
    },
    {
      "title": "Introduction à la cybersécurité pour les développeurs",
      "slug": "cybersecurite-developpeurs",
      "description": "Les bases de la cybersécurité que tout développeur doit connaître.",
      "content": "# Introduction à la cybersécurité\n\n## Menaces courantes\n\n### Injection SQL\n\n```sql\nSELECT * FROM users WHERE username = 'admin' OR '1'='1' AND password = 'password'\n```\n\nPour se protéger :\n1. Utilisez des requêtes préparées\n2. Échappez les entrées utilisateur\n3. Implémentez une authentification forte\n\n### XSS (Cross-Site Scripting)\n\nTypes d'XSS :\n- Stored XSS : Le code malveillant est stocké sur le serveur\n- Reflected XSS : Le code malveillant est injecté dans l'URL\n- DOM XSS : Le code malveillant est injecté via le DOM\n\n### Vulnérabilités OWASP Top 10\n\n| Rang | Vulnérabilité | Impact |\n|------|--------------|--------|\n| 1 | Injection | Critique |\n| 2 | Authentification faible | Élevé |\n| 3 | XSS | Élevé |\n| 4 | Configuration sécurisée | Moyen |\n| 5 | Gestion des sessions | Moyen |\n\n### Bonnes pratiques\n\n1. Gestion des mots de passe\n   - Utilisez des hachages forts (bcrypt, Argon2)\n   - Implémentez un système de verrouillage\n   - Utilisez des mots de passe uniques\n\n2. Validation des entrées\n   - Échappez les entrées utilisateur\n   - Utilisez des régular expressions\n   - Implémentez des limites de taille\n\n3. Gestion des sessions\n   - Utilisez des tokens de session\n   - Implémentez un timeout\n   - Secure les cookies\n\n4. Configuration sécurisée\n   - Désactivez les fonctionnalités inutilisées\n   - Mettez à jour régulièrement\n   - Utilisez des certificats SSL\n\n### Sécurité des API\n\n```javascript\n// Bonne pratique pour les API REST\nconst express = require('express');\nconst app = express();\nconst helmet = require('helmet');\n\napp.use(helmet()); // Protection des headers\napp.use(express.json()); // Validation JSON\n\n// Rate limiting\nconst rateLimit = require('express-rate-limit');\napp.use(rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100 // Limite de requêtes\n}));\n```\n\n### Sécurité des données\n\n| Type | Description | Protection |\n|------|-------------|------------|\n| Données sensibles | Informations personnelles | Chiffrement |\n| Données d'authentification | Mots de passe | Hachage |\n| Données de transaction | Paiements | Tokenisation |\n\n### Ressources utiles\n\n- OWASP : [owasp.org](https://owasp.org)\n- NIST : [nist.gov](https://nist.gov)\n- SANS Institute : [sans.org](https://sans.org)",
      "categorie": "Sécurité",
      "image": {
        "url": "https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5",
        "publicId": "cybersecurity"
      }
    }
  ]
}
